-- 全球化和本地化

-- 字符集和校对顺序

-- 使用字符集和校对顺序

-- 为查看所支持的字符集完整列表，使用以下语句：
SHOW CHARACTER SET;

SHOW COLLATION;




-- 安全管理

-- 访问控制；

-- 管理用户

-- 创建用户账号
CREATE USER ben IDENTIFIED BY 'P@$$wOrd';

-- 为重新命名一个用户账号，使用RENAME USER语句，如下所示：
RENAME USER ben TO bforta;

-- 删除用户账号
DROP USER bforta;

-- 设置访问权限

-- 为看到赋予用户账号的权限，使用SHOW GRANTS FOR
SHOW GRANTS FOR bforta;

-- 设置权限
GRANT SELECT,INSERT ON crashcourse.* TO bforta;





-- 数据库维护

-- 备份数据

-- 进行数据库维护

-- 查看日志文件

-- 改善性能

/*
	首先， MySQL（与所有DBMS一样）具有特定的硬件建议。在学
	习和研究MySQL时，使用任何旧的计算机作为服务器都可以。但
	对用于生产的服务器来说，应该坚持遵循这些硬件建议。
	 一般来说，关键的生产DBMS应该运行在自己的专用服务器上。
	 MySQL是用一系列的默认设置预先配置的，从这些设置开始通常
	是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大
	小等。（为查看当前设置，可使用 SHOW VARIABLES;和 SHOW
	STATUS;。）
	 MySQL一个多用户多线程的DBMS，换言之，它经常同时执行多
	个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执
	行缓慢。如果你遇到显著的性能不良，可使用SHOW PROCESSLIST
	显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用
	KILL命令终结某个特定的进程（使用这个命令需要作为管理员登
	录）。
	 总是有不止一种方法编写同一条SELECT语句。 应该试验联结、并、
	子查询等，找出最佳的方法。
	 使用EXPLAIN语句让MySQL解释它将如何执行一条SELECT语句。
	 一般来说，存储过程执行得比一条一条地执行其中的各条MySQL
	语句快。
	 应该总是使用正确的数据类型。
	 决不要检索比需求还要多的数据。换言之，不要用SELECT *（除
	非你真正需要每个列）。
	 有的操作（包括INSERT）支持一个可选的DELAYED关键字，如果
	使用它，将把控制立即返回给调用程序，并且一旦有可能就实际
	执行该操作。
	 在导入数据时，应该关闭自动提交。你可能还想删除索引（包括
	FULLTEXT索引），然后在导入完成后再重建它们。
	 必须索引数据库表以改善数据检索的性能。确定索引什么不是一
	件微不足道的任务，需要分析使用的SELECT语句以找出重复的
	WHERE和ORDER BY子句。如果一个简单的WHERE子句返回结果所花
	的时间太长，则可以断定其中使用的列（或几个列）就是需要索
	引的对象。
	 你的SELECT语句中有一系列复杂的OR条件吗？通过使用多条
	SELECT语句和连接它们的UNION语句，你能看到极大的性能改
	进。
	 索引改善数据检索的性能，但损害数据插入、删除和更新的性能。
	如果你有一些表，它们收集数据且不经常被搜索，则在有必要之
	前不要索引它们。（索引可根据需要添加和删除。）
	 LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。
	 数据库是不断变化的实体。一组优化良好的表一会儿后可能就面
	目全非了。由于表的使用和内容的更改，理想的优化和配置也会
	改变。
	 最重要的规则就是，每条规则在某些条件下都会被打破。
*/